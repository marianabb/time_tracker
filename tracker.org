#+TITLE: Detection and Quantification of Small Changes in MRI Volumes -- Time Tracker
#+AUTHOR: Mariana Bustamante



* Meetings
** Meeting with Anders 09-2:
- I showed him the time plan. He agrees with it.
- We will not focus on implementing a registration method, we will use already available methods. Possibly letting the user choose which method to use, after we have already filtered the worse ones.
- We will focus on the part about detecting small changes (possibly showing them in the interface) and quantifying them.
- Anders believes that it would be good if the final product is a 3DSlicer module instead of an independent application. Because a module can be reused and we would also be able to make it public and receive comments and reviews from people who work in the area. It depends on whether we have all the tools that we need available in 3DSlicer.

- Specifically about 3D Slicer:
  + "View" -> "Python interactor" in 3DSlicer allows us to use the python command line directly inside 3DSlicer and access all variables and methods. This is awesome!
  + This means that we'll probably be able to substract volumes and do most of the things we can do in MatLab in 3DSlicer (hopefully, it remains to be proven).
- OpenCV could also be useful, can be used from Python but not necessarily from 3DSlicer.
- Probably useful book: Programming Computer Vision with Python -> http://www.maths.lth.se/matematiklth/personal/solem/book.html

** DONE Meeting with Robin 20-2:
   CLOSED: [2012-02-20 Mon 11:16]
- Fiducials / ACPC
- ROIs, remove parts
- Skullstripping
     
- Which methods allow ROIs? and [[*Skullstripping][skullstripping]]

** No meeting on 27-2 - I was sick
** DONE Meeting with Robin 05-3:
  CLOSED: [2012-03-05 Mon 11:12]
- Continue reading Slicer documentation
- [ ] Goal for the week: Create a module, not necesarily very functional.
- [ ] Next week we must agree on what functions and methods to use according to the papers read.
** No meeting on 12-3 - I was sick again
** Meeting with Robin 15-3 (Thursday):
- Progress on compilation.
- Started to write a new module, still unsure about which module type is best.
** DONE Meeting with Robin 19-3:
   CLOSED: [2012-03-19 Mon 11:49]
- Showed him the first prototype of the new module. It is a Python scripted module.
- Seems to have potential, but I need more time with it.

* Papers and readings
** Registration lecture notes
[[file:../thesis_papers/registration_class_notes.org][Notes on the lecture]]


** Paper: Image registration methods: A survey
[[file:../thesis_papers/image_registration_methods_a_survey.org][Summary]]
** Paper: Quantitative comparison of algorithms for intersubject registration
[[file:../thesis_papers/quantitative_comparison_of_algorithms_for_intersubject_registration.org][Summary]]

** Paper: A review of the automated detection of change in serial imaging studies of the brain
[[file:../thesis_papers/a_review_of_the_automated_detection_of_chage_in_serial_imaging_studies_of_the_brain.org][Summary]]

** DONE Paper: Automatic detection and segmentation of evolving processes in 3D medical Images: Application to multiple sclerosis.
                    CLOSED: [2012-02-28 Tue 16:40]
- [[file:../thesis_papers/automatic_detection_and_segmentation_of_evolving_processes.org][Summary]]
** DONE Paper about quantifying metrics for tumor progression.
   CLOSED: [2012-02-27 Mon 15:41]
[[quantify tumor progression][All about it in the Change Tracker section]]


* Slicer
** DONE Which methods allow the following:
  CLOSED: [2012-03-01 Thu 16:49]
*** Fiducials / ACPC
- Registration > Fiducial Registration :: computes a linear transform from two lists of fiducials. The transform can either be 
   translation only, rigid transform, or similarity transform.
- Registration > ACPC Transform :: The resulting transform will bring the line connecting AC and PC to a line horizontal to the AP axis.
*** ROIs, remove parts
- Wizards > ChangeTracker :: allows marking of zones to be analyzed and it finds differences. [[ChangeTracker][But is special for tumors]].
- 'Mask options' in Registration > BRAINS :: The mask ROI is a volume and can be provided or autogenerated (ROIAUTO).
- Foreground Masking Module :: in Segmentation > Specialized > Foreground Masking (BRAINS). Available in Slicer3 and Slicer4. [[http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.0/Modules/ForegroundMasking][Link]].
  Uses a combination of otsu thresholding and a closing operations.
*** Skullstripping
- Skull stripping module in Slicer3: [[http://www.slicer.org/slicerWiki/index.php/Modules:SkullStripperModule][Module link]] (it's marked as 'in progress').
- Not in Slicer4 as a separate module.

** DONE HelloPython Slicer tutorial
  CLOSED: [2012-02-21 Tue 16:24]
  - [[http://www.slicer.org/slicerWiki/images/3/3c/ProgrammingIntoSlicer3.6.1_HelloPython_MICCAI2010_SoniaPujol.pdf][Link to the tutorial]]
  - Works in Slicer 3 ONLY. Terrible + messy documentation!!
  - Tried unsuccesfully to modify the script to do everything automatic. I guess I need more working examples.

** DONE Tutorial on quantitative imaging
  CLOSED: [2012-02-22 Wed 16:19]
1. [[http://www.slicer.org/slicerWiki/images/c/c6/Slicer4QuantitativeImaging.pdf][Link to the tutorial]]   
2. Important part begins on slide 56 (exploring volumetric changes)
3. <<<ChangeTracker>>> Module --> [[http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.0/Modules/ChangeTracker][Slicer4 module page]] [[http://wiki.slicer.org/slicerWiki/index.php/Modules:ChangeTracker-Documentation-3.6][Slicer3 module page]]
   + Main goal is tumor changes.
   + Assumes (among other things): the pathology area is characterized by bright image intensities (contrast-enhanced meningioma MRI).
   + Change can be detected by analyzing intensity pattern (fast) or deformation map (slow).
   + It is not perfect, some times fails, some times crashes.
   + It allows registering the data with my own transformation (obtained before) instead of using the default one which is Rigid registration.
   + It also allows skipping the registration step altogether.

** DONE Read more about developing for Slicer
   CLOSED: [2012-03-20 Tue 16:44]
There's always more, but I'll implement stuff in the next few bullets.
*** DONE Read [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Modules][This]] about the types of Slicer Modules
    CLOSED: [2012-03-06 Thu 11:47]
 Slicer4 supports 3 types of modules:
  1. Command Line Interface (CLI)
  2. Loadable Modules
  3. Scripted Modules
- The end user won't notice a difference as they all share the look & feel. The choice for a given type of module is usually based 
  on the type of inputs/parameters for a given module.
**** Command Line Interface (CLI)
- In theory this is the simplest mechanism to contribute an algorithm to Slicer.
- Standalone executables with a limited input/output arguments complexity (simple argument types, no user interactions). 
- They are typically implemented using ITK. 
- The recommended way to write your own CLI is to copy an existing module.
- GUI automatically generated.


- Require a module.xml that produces a user interface and a module.cxx or module.py. One directory with everything.
- Can't update the 3D visualization or Slicer viewers while executing.
- Can't accept or request input while running.
- Restricted access to Slicer internals.

**** Loadable Modules
- C++ plugins that are built against Slicer. They define custom GUIs for their specific behavior as they have full control over the application.
- Full control over the GUI (Qt) and Slicer internals (MRML, logics, display managers...).
- Optimized for heavy computations.

- Change tracker is a loadable module.
- Can create your own using ModuleWizard.py.
***** DONE Is it in the nightly build version? Maybe must compile Slicer from scratch? This is annoying!
      CLOSED: [2012-03-06 Tue 11:03]
- No it's not, the nightly build is also compiled (hence the 'build', duh). To develop on it, Slicer must be compiled on the computer. Must download version from repository.
- Next Step: [[Compiling Slicer][compiling]].
**** Scripted Modules
- Written in Python and typically but not necessarily use the high level API of Slicer and toolkits.
- Full access to the API: VTK, ITK, MRML, Qt and Slicer are fully wrapped.
- Recommended for fast prototyping.
- Limited access to Slicer internals.

*** DONE Read more documentation on new modules/extensions
    CLOSED: [2012-03-20 Tue 16:43]
See [[Write a simple testing module]].
*** DONE Find more examples
    CLOSED: [2012-03-20 Tue 16:43]
These are quite useful:
1. ChangeTracker example: [[https://github.com/fedorov/ChangeTrackerPy][here]].
2. DICOM Full Brain Tractography: [[http://viewvc.slicer.org/viewvc.cgi/Slicer4/trunk/Modules/Scripted/Scripts/DICOM2FullBrainTractography/][here]].
** DONE Compiling Slicer4 from source
   CLOSED: [2012-03-09 Fri 14:09]
- I used [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Build_Instructions][this]] intructions.
- git-svn is not installed on my machine. I requested it from Olle.
- Later I would like to fork Slicer4 into my github. Here are [[http://www.slicer.org/slicerWiki/index.php/Slicer:git-svn][the instructions]].
- During configuring, they say the command is:
#+BEGIN_SRC sh
ccmake ../Slicer4
#+END_SRC
but what works (obviously) is
#+BEGIN_SRC sh
ccmake ../
#+END_SRC
- I need to fill a few [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Build_Instructions/Prerequisites][prerequisites]]. Everything is there except for Qt 4.6.3 (I have 4.6.2).
*** DONE Install Qt locally
    CLOSED: [2012-03-07 Wed 11:05]
- Installing Qt, even from a binary, is VERY slow...

- Installed Qt 4.8.0 in
#+BEGIN_SRC sh
~/thesis_apps/QtSDK/Desktop/Qt/4.8.0/gcc/bin
#+END_SRC

- Compilation error with PythonQt. Wrote to the mailing list.
*** DONE Install Qt 4.7.4
    CLOSED: [2012-03-08 Thu 15:37]
- The binary was not easy to find AT ALL!
- It was actually 4.7.0, but it worked
*** DONE Attempt compilation again
    CLOSED: [2012-03-09 Fri 13:37]

- Installed Qt 4.7.0 in (the working one!)
#+BEGIN_SRC sh
~/thesis_apps/qtsdk-2010.05/qt/bin
#+END_SRC

- Commands to compile:
  1. Create the project Slicer4-Superbuild that manages all the external dependencies of Slicer (VTK, ITK, Python, ...) with:
#+BEGIN_SRC sh
     mkdir Slicer4-SuperBuild
     cd Slicer4-SuperBuild
     ccmake -DQT_QMAKE_EXECUTABLE:FILEPATH=~/thesis_apps/qtsdk-2010.05/qt/bin/qmake ../
#+END_SRC
  2. Create the second project in Slicer4-Superbuild/Slicer-build: the "traditional" build directory of Slicer, by running inside Slicer4-Superbuild:
#+BEGIN_SRC sh 
        make -j <Number of cores>
#+END_SRC
  3. Be patient. It takes forever the first time. Forever, seriously.

- Run Slicer:
#+BEGIN_SRC sh 
  Slicer4-SuperBuild/Slicer-build/Slicer
#+END_SRC

- It works! :)

** DONE Write a simple testing module
   CLOSED: [2012-03-20 Tue 16:21]
- The resulting module is here: [[https://github.com/marianabb/slicer_modules/tree/master/ScriptMB][ScriptMB]].

*** Which type of modules should I try?
The best options available for module prototypes are:
- [ ] Command Line Interface: Lots of info [[http://www.slicer.org/slicerWiki/index.php/Slicer3:Execution_Model_Documentation][here]] (for Slicer3, but it's supposed to be very similar).
- [X] Scripted Module: Doesn't need compiling. Have limited access to Slicer internals. Can run CLI from Python, how to do this [[http://www.slicer.org/slicerWiki/index.php/Slicer4:Python][here]].
- [ ] External Module: Loadable module that is compiles outside the slicer build tree. [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Tutorials/ExternalModuleWriting][Tutorial]].
- [ ] Regular Loadable Module: In C++. Compiles with Slicer. [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Tutorials/ModuleWriting][Tutorial]].
*** DONE Write a scripted module (simple, for testing)
    CLOSED: [2012-03-20 Tue 16:10]
- Here are some initial testing [[https://github.com/marianabb/slicer_modules/blob/master/scripted_module.py][scripts]].
- Create a module using the [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/ModuleWizard][ModuleWizard]].
- The file that they open as a volume in the example is a .nrrd, this could be a data file of any type, it just follows some rules.
- The symbol "~" doesn't work on paths.
- The commands for loading a volume work ONLY in the compiled version, not in the binary (I don't know why):
#+BEGIN_SRC python
  slicer.util.loadVolume("/home/mariana/thesis/volumes/first_batch/patient1-us1/test.dcm")
  n = getNode('test')
#+END_SRC
- The effect of the called CLI takes an unlimited amount of time to show up on the UI. I believe it executes fast but the model is not refreshed on screen. See [[force a refresh][here]].
- To access a list of CLIs:
#+BEGIN_SRC python
  parameters = {}
  parameters["ParameterName"] = volumeNode.GetID()
  CLI_module = slicer.modules.CLI_name
#+END_SRC
- To execute a CLI:
#+BEGIN_SRC python
  slicer.cli.run(CLI_module, None, parameters)
#+END_SRC
- Installed the VTK package in the Python tree.

- Slicer can be run as:
#+BEGIN_SRC sh
  ./Slicer --python-script <python script to execute after Slicer loads>
  ./Slicer --python-code <python code to execute after Slicer loads>
#+END_SRC
  Now, what is the difference between "python script" and "python code"?
- Can use matplotlib to plot things. 
- Slicer/Libs/qMRMLWidgets: MRML-aware widgets

- Installed ipython and matplotlib as explained in the tutorial.
**** DONE How to launch term in order to run ipython?
     CLOSED: [2012-03-15 Thu 17:55]
     1. Launch xterm through Slicer:
#+BEGIN_SRC sh
        ./Slicer-build/Slicer --xterm
#+END_SRC
     2. Launch ipython from inside xterm:
#+BEGIN_SRC sh
        ../python-build/bin/ipython
#+END_SRC
***** TODO ipython works, but the command 'import slicer' causes segmentation fault. Fix? 

**** DONE Can a function be added on the console?
     CLOSED: [2012-03-15 Thu 15:52]
Yes, can't use middle-click. Must use right-click+paste or ctrl-c + ctrl-v. This sucks!

**** DONE How to see it from the UI?
     CLOSED: [2012-03-16 Fri 14:47]
Add the path to the module in "Additional module paths" on Slicer settings. It will load it automatically.

**** DONE How to force a refresh on the UI? 
     CLOSED: [2012-03-16 Fri 13:53]
- In the video tutorial there are two commands that produce immediate results in the UI:
#+BEGIN_SRC python
  n = getNode('MRHead1')
  d = n.GetDisplayNode()
  d.SetApplyThreshold(0) # This
  
  i = n.GetImageData()
  import vtk.util.numpy_support
  a = vtk.util.numpy_support.vtk_to_numpy(i.GetPointData().GetScalars())
  a[:] = -a
  i.Modified() # And this!
#+END_SRC

- UPDATE: I think what I was experiencing was not lack of UI response but slowness on the CLIs to finish. I can now tell whether a CLI is still running.

**** DONE Try to call a registration method as a CLI from a script.
     CLOSED: [2012-03-20 Tue 16:08]
- March 16th: almost working. The registration is called but need to handle the result properly.
- March 19th: I'm not sure it's working anymore. Will try to create a simpler CLI call first.  
- March 20th: It works! I've created an example that calls a CLI that subtracts volumes and another that registers two volumes. See my first module: [[https://github.com/marianabb/slicer_modules/tree/master/ScriptMB][ScriptMB]].

**** DONE create a repository
      CLOSED: [2012-03-16 Fri 18:45]
[[https://github.com/marianabb/slicer_modules][Link to the repository]]
     
**** DONE Make a useful UI on the module
     CLOSED: [2012-03-16 Fri 18:36]
- The button "GrayModel" on my new module calls the CLI Gray Scale Model Maker.
- Added button "Register" also. 
- Need more experimenting and examples. Mostly examples. Found a good one in the source code for ChangeTracker: [[https://github.com/fedorov/ChangeTrackerPy][CTsource]]
  
** TODO Write a less basic scripted module
Goals:
- [ ] Have two steps, like in ChangeTracker. Step 1: Registration, Step 2: Difference quantification.
- [ ] Choose among many registration CLIs.
- [ ] Result in a new MRMLScalarVolume that gets created automatically.
- [ ] Change some parameters for the registration algorithms?
- [ ] Need to do more thinking for Step 2.


** Interesting details about Slicer
- Application settings (including the search path for modules/extensions) are stored in a .ini file. The location of the file depends on the OS:
  + Linux + Mac OS X: ~/.config/www.na-mic.org/Slicer.ini or ~/.config/NA-MIC/Slicer.ini
  + Windows: C:\Users\USERNAME\AppData\Roaming\NA-MIC\Slicer.ini
- Useful [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Tutorials/Troubleshooting][link]] with advice on handling memory leaks and crashes.

    
* ChangeTracker Module
** DONE How slow/good is the slow option? (deformation map)
    CLOSED: [2012-02-22 Wed 16:21]
- It's not an option in Slicer4, only in Slicer3. I don't know why it's mentioned in the tutorial, probably the Slicer4 version is not done.
- More quantification metrics can be added manually.
      
** TODO Check ChangeTracker source code
** DONE Does it exist for Slicer3?
    CLOSED: [2012-02-23 Thu 13:59]
    Yes, actually the documentation is better and the module is more complete.

** DONE Find a way to use the slow option (deformation map)
    CLOSED: [2012-02-23 Thu 14:13]
    Solution: Use Slicer3

** DONE Read the paper about metrics to quantify tumor progression
    CLOSED: [2012-02-27 Mon 15:41]
[[http://www.spl.harvard.edu/publications/item/view/1430][- Link to the paper]]
- [[file:../thesis_papers/monitoring_slowly_evolving_tumors.org][Summary]]

** DONE Can I use it freely?
   CLOSED: [2012-03-02 Fri 14:26]
- The module is included in Slicer3, so I'm assuming it has the same Licence as Slicer.
- Here is a [[http://slicer.org/pages/LicenseText][Link]] to the Slicer License Agreement.
- Basically it says that the software is open source and grants everything to 'Brigham' (The Brigham and Women's Hospital, Inc.).

* Other tools
** TODO Do some experiments with FSL (The tool mentioned by Raili)
Here is the [[http://www.fmrib.ox.ac.uk/fslcourse/][Link]]

* Extras
** DONE New repository for papers
   CLOSED: [2012-02-22 Wed 11:22]
   It's in Github, named thesis\_papers
** DONE New repository for the time tracker
   CLOSED: [2012-03-01 Thu 11:28]
   It's in Github, named time\_tracker
** DONE Can I use my public\_html page?
   CLOSED: [2012-03-01 Thu 19:02]
Yes, yes I can. [[http://cb.uu.se/~mariana][Here]].
** DONE Fix all the links, specially the papers.
   CLOSED: [2012-03-05 Mon 13:55]
** There is always more to learn about org mode!
