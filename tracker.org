#+TITLE: Detection and Quantification of Small Changes in MRI Volumes -- Time Tracker
#+AUTHOR: Mariana Bustamante



* Meetings
** Meeting with Anders 09-2:
- I showed him the time plan. He agrees with it.
- We will not focus on implementing a registration method, we will use already available methods. Possibly letting the user choose which method to use, after we have already filtered the worse ones.
- We will focus on the part about detecting small changes (possibly showing them in the interface) and quantifying them.
- Anders believes that it would be good if the final product is a 3DSlicer module instead of an independent application. Because a module can be reused and we would also be able to make it public and receive comments and reviews from people who work in the area. It depends on whether we have all the tools that we need available in 3DSlicer.

- Specifically about 3D Slicer:
  + "View" -> "Python interactor" in 3DSlicer allows us to use the python command line directly inside 3DSlicer and access all variables and methods. This is awesome!
  + This means that we'll probably be able to substract volumes and do most of the things we can do in MatLab in 3DSlicer (hopefully, it remains to be proven).
- OpenCV could also be useful, can be used from Python but not necessarily from 3DSlicer.
- Probably useful book: Programming Computer Vision with Python -> http://www.maths.lth.se/matematiklth/personal/solem/book.html

** DONE Meeting with Robin 20-2:
   CLOSED: [2012-02-20 Mon 11:16]
- Fiducials / ACPC
- ROIs, remove parts
- Skullstripping
     
- Which methods allow ROIs? and [[*Skullstripping][skullstripping]]

** No meeting on 27-2 - I was sick
** DONE Meeting with Robin 05-3:
  CLOSED: [2012-03-05 Mon 11:12]
- Continue reading Slicer documentation
- [X] Goal for the week: Create a module, not necesarily very functional.
- [X] Next week we must agree on what functions and methods to use according to the papers read.
** No meeting on 12-3 - I was sick again
** Meeting with Robin 15-3 (Thursday):
- Progress on compilation.
- Started to write a new module, still unsure about which module type is best.
** DONE Meeting with Robin 19-3:
   CLOSED: [2012-03-19 Mon 11:49]
- Showed him the first prototype of the new module. It is a Python scripted module.
- Seems to have potential, but I need more time with it.

** DONE Meeting with Raili and Robin 26-3:
   CLOSED: [2012-03-26 Mon 11:38]
- Deadlines: 27 May to have something for the MRI conference in October. We might focus on something specific to have it ready in time.
- We have a few tracks for this project:
  1. Deformed brain -> Robust registration.
  2. Detection of small differences.
  3. Volume / location accuracy
  4. GUI / Interaction
- We will focus on 2 and 3 for the May deadline.
- Raili will try to find more patients with 2 MRI volumes.
- Robin will find more MRIs from another project.
*** DONE Check if the DICOMDIR MRIs work
    CLOSED: [2012-03-27 Tue 14:57]
- Created a script: Find it in thesis/matlab/convertDICOMDIR\_dcm.m
- [2012-03-26 Mon]: I can obtain a 3D array with the values of the volume and a series of 176 .dcm files. Still can't manage to create just one file.
- [2012-03-27 Tue]: With some help from Robin the script works and creates just one .dcm file. But the planes are wrong on the resulting .dcm.
  - Lets NOT use DICOMDIRs anymore!
**** TODO Fix the planes bug on the .dcm creator scripts (mine and Robin's)

** DONE Meeting with Robin [2012-03-30 Fri]
   CLOSED: [2012-03-30 Fri 16:28]
Current goals:
- [X] Finish adding registration methods.
- [X] Add a field for an already registered volume.
- [X] Create a third step for quantification that only substract the volumes.
- [X] Show the differences as a different color/intensity on the screen.

** DONE Meeting with Robin [2012-04-10 Tue]
   CLOSED: [2012-04-10 Tue 12:37]
- [X] User defined threshold
- [X] Fix the volumes that we have. Make a list of what we have/need.
- [X] Figure out if we can get a vector field transform to use for the Jacobian.
      - The 'slow' method in ChangeTracker uses this and the Jacobian. So I guess it's possible. However, it's only included in Slicer 3.
      - This is most likely possible, but the ITK code is complicated. I'm working on it, see [[do quantification][here]] (CT quantification) and [[Learn some ITK][here]] (ITK).
- [X] What are they using in ChangeTracker to quantify changes? See [[do quantification][here]].

** DONE Meeting with Raili [2012-04-11 Wed]
   CLOSED: [2012-04-11 Wed 11:47]
- Fiducials: base of brain and PC are more reliable. AC not so much. Measure between bones in brain stem might also be reliable.
- We got another volume, this one has 3 measurements with 3 different tumor status.
- We want to see the differences in 2D and 3D also, depending on the case (bigger 3D, smaller 2D perhaps). Maybe we can make it choosable, with buttons to disappear.
** DONE Meeting with Joel + Robin [2012-04-18 Wed]
   CLOSED: [2012-04-18 Wed 11:38]
- We got 38 volumes of normal patients taken when they were 75 and 80 years old.
- They might also be interested in our tool.
- Platinum looks ok, but I think Slicer has more options.
- [X] He sent a paper about brain lesions. Google for 'white matter lesions flair'.
      Finished reading it on [2012-04-23 Mon]. I don't think I'll make a summary, it's interesting, but too medical.
- [X] They will send information about skull stripping
      Read it. Short, concise and useful. Will probably use it later on.
- [X] They will send more volumes of people without differences. Plus they also sent a whole body volume.
- [X] Check tensor and voxel based morphometry. I think they might be the same metrics they use in ChangeTracker.
- [ ] Check FreeSurfer for atlas.

** DONE Meeting with Robin [2012-04-23 Mon]
   CLOSED: [2012-04-23 Mon 16:01]
Three main things we need to do now (already in the TODO, but we defined an order):
1. [X] Learn ITK + write a program callable from Slicer.
2. [ ] Find papers and read about Tensor based Morphometry.
3. [ ] Experiments with registration methods. After we know which method to use, since the registration approach depends on it.

** DONE Meeting with Robin [2012-05-08 Tue]
   CLOSED: [2012-05-08 Tue 15:21]
- [ ] Robin found a nice chapter from book on Morphometry. Must read.
- [X] I will continue working on deformation fields in ITK. See what I can do with them, obtain their information.
- [ ] Robin wrote to Joel about the summer job. He is at a conference, will probably answer mext week. 
- Robin will help with reference letters.

** DONE Meeting with Raili [2012-04-25 Wed]
   CLOSED: [2012-04-25 Wed 11:24]
- We will start our experiments with artificial differences. The most "useful" differences according to Raili are in the center (corpus callosum) and
  in the frontal part of the brain. The frontal part is important because an injure here might only produce "subjective" symptoms on the patients,
  which are very hard to measure and very hard to prove for insurance companies.
- The type of injuries we are looking for are in size and localized, usually we are not interested in differences in intensities because this differences
  could have been inserted by the MRI technique.
  - Question for Robin: does this eliminate voxel-based morphometry as one of the main comparison techniques?
- There are more projects where this application could be useful. They are measuring the hypothalamus manually for comparison and would like to measure
  cortical thickness but it's impossible to do it manually.
- We will meet again when we have something more to show. Raili will be away the first week of May and Robin will be away in June (3rd to 26th).

** DONE Meeting with Robin [2012-05-29 Tue]
   CLOSED: [2012-05-29 Tue 11:57]
   - [ ] Try obtaining a Grid transform and using it as a deformation field from BSpline deformable registration.
   - [ ] Try logarithm again but adding +1 
   - [ ] Summary of morphometry chapter
   - Robin is leaving soon to France. He'll be out all of June but we will maintain contact at least 2 times a week.
     

* Papers and readings
** Registration lecture notes
[[file:../thesis_papers/registration_class_notes.org][Notes on the lecture]]


** Paper: Image registration methods: A survey
[[file:../thesis_papers/image_registration_methods_a_survey.org][Summary]]
** Paper: Quantitative comparison of algorithms for intersubject registration
[[file:../thesis_papers/quantitative_comparison_of_algorithms_for_intersubject_registration.org][Summary]]

** Paper: A review of the automated detection of change in serial imaging studies of the brain
[[file:../thesis_papers/a_review_of_the_automated_detection_of_chage_in_serial_imaging_studies_of_the_brain.org][Summary]]

** DONE Paper: Automatic detection and segmentation of evolving processes in 3D medical Images: Application to multiple sclerosis.
                    CLOSED: [2012-02-28 Tue 16:40]
- [[file:../thesis_papers/automatic_detection_and_segmentation_of_evolving_processes.org][Summary]]
** DONE Paper about quantifying metrics for tumor progression.
   CLOSED: [2012-02-27 Mon 15:41]
[[quantify tumor progression][All about it in the Change Tracker section]]


* Slicer
** DONE Which methods allow the following:
  CLOSED: [2012-03-01 Thu 16:49]
*** Fiducials / ACPC
- Registration > Fiducial Registration :: computes a linear transform from two lists of fiducials. The transform can either be 
   translation only, rigid transform, or similarity transform.
- Registration > ACPC Transform :: The resulting transform will bring the line connecting AC and PC to a line horizontal to the AP axis.
*** ROIs, remove parts
- Wizards > ChangeTracker :: allows marking of zones to be analyzed and it finds differences. [[ChangeTracker][But is special for tumors]].
- 'Mask options' in Registration > BRAINS :: The mask ROI is a volume and can be provided or autogenerated (ROIAUTO).
- Foreground Masking Module :: in Segmentation > Specialized > Foreground Masking (BRAINS). Available in Slicer3 and Slicer4. [[http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.0/Modules/ForegroundMasking][Link]].
  Uses a combination of otsu thresholding and a closing operations.
*** Skullstripping
- Skull stripping module in Slicer3: [[http://www.slicer.org/slicerWiki/index.php/Modules:SkullStripperModule][Module link]] (it's marked as 'in progress').
- Not in Slicer4 as a separate module.

** DONE HelloPython Slicer tutorial
  CLOSED: [2012-02-21 Tue 16:24]
  - [[http://www.slicer.org/slicerWiki/images/3/3c/ProgrammingIntoSlicer3.6.1_HelloPython_MICCAI2010_SoniaPujol.pdf][Link to the tutorial]]
  - Works in Slicer 3 ONLY. Terrible + messy documentation!!
  - Tried unsuccesfully to modify the script to do everything automatic. I guess I need more working examples.

** DONE Tutorial on quantitative imaging
  CLOSED: [2012-02-22 Wed 16:19]
1. [[http://www.slicer.org/slicerWiki/images/c/c6/Slicer4QuantitativeImaging.pdf][Link to the tutorial]]   
2. Important part begins on slide 56 (exploring volumetric changes)
3. <<<ChangeTracker>>> Module --> [[http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.0/Modules/ChangeTracker][Slicer4 module page]] [[http://wiki.slicer.org/slicerWiki/index.php/Modules:ChangeTracker-Documentation-3.6][Slicer3 module page]]
   + Main goal is tumor changes.
   + Assumes (among other things): the pathology area is characterized by bright image intensities (contrast-enhanced meningioma MRI).
   + Change can be detected by analyzing intensity pattern (fast) or deformation map (slow).
   + It is not perfect, some times fails, some times crashes.
   + It allows registering the data with my own transformation (obtained before) instead of using the default one which is Rigid registration.
   + It also allows skipping the registration step altogether.

** DONE Read more about developing for Slicer
   CLOSED: [2012-03-20 Tue 16:44]
There's always more, but I'll implement stuff in the next few bullets.
*** DONE Read [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Modules][This]] about the types of Slicer Modules
    CLOSED: [2012-03-06 Thu 11:47]
 Slicer4 supports 3 types of modules:
  1. Command Line Interface (CLI)
  2. Loadable Modules
  3. Scripted Modules
- The end user won't notice a difference as they all share the look & feel. The choice for a given type of module is usually based 
  on the type of inputs/parameters for a given module.
**** Command Line Interface (CLI)
- In theory this is the simplest mechanism to contribute an algorithm to Slicer.
- Standalone executables with a limited input/output arguments complexity (simple argument types, no user interactions). 
- They are typically implemented using ITK. 
- The recommended way to write your own CLI is to copy an existing module.
- GUI automatically generated.


- Require a module.xml that produces a user interface and a module.cxx or module.py. One directory with everything.
- Can't update the 3D visualization or Slicer viewers while executing.
- Can't accept or request input while running.
- Restricted access to Slicer internals.

**** Loadable Modules
- C++ plugins that are built against Slicer. They define custom GUIs for their specific behavior as they have full control over the application.
- Full control over the GUI (Qt) and Slicer internals (MRML, logics, display managers...).
- Optimized for heavy computations.

- Change tracker is a loadable module.
- Can create your own using ModuleWizard.py.
***** DONE Is it in the nightly build version? Maybe must compile Slicer from scratch? This is annoying!
      CLOSED: [2012-03-06 Tue 11:03]
- No it's not, the nightly build is also compiled (hence the 'build', duh). To develop on it, Slicer must be compiled on the computer. Must download version from repository.
- Next Step: [[Compiling Slicer][compiling]].
**** Scripted Modules
- Written in Python and typically but not necessarily use the high level API of Slicer and toolkits.
- Full access to the API: VTK, ITK, MRML, Qt and Slicer are fully wrapped.
- Recommended for fast prototyping.
- Limited access to Slicer internals.

*** DONE Read more documentation on new modules/extensions
    CLOSED: [2012-03-20 Tue 16:43]
See [[Write a simple testing module]].
*** DONE Find more examples
    CLOSED: [2012-03-20 Tue 16:43]
These are quite useful:
1. ChangeTracker example: [[https://github.com/fedorov/ChangeTrackerPy][here]].
2. DICOM Full Brain Tractography: [[http://viewvc.slicer.org/viewvc.cgi/Slicer4/trunk/Modules/Scripted/Scripts/DICOM2FullBrainTractography/][here]].
** DONE Compiling Slicer4 from source
   CLOSED: [2012-03-09 Fri 14:09]
- I used [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Build_Instructions][this]] intructions.
- git-svn is not installed on my machine. I requested it from Olle.
- Later I would like to fork Slicer4 into my github. Here are [[http://www.slicer.org/slicerWiki/index.php/Slicer:git-svn][the instructions]].
- During configuring, they say the command is:
#+BEGIN_SRC sh
ccmake ../Slicer4
#+END_SRC
but what works (obviously) is
#+BEGIN_SRC sh
ccmake ../
#+END_SRC
- I need to fill a few [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Build_Instructions/Prerequisites][prerequisites]]. Everything is there except for Qt 4.6.3 (I have 4.6.2).
*** DONE Install Qt locally
    CLOSED: [2012-03-07 Wed 11:05]
- Installing Qt, even from a binary, is VERY slow...

- Installed Qt 4.8.0 in
#+BEGIN_SRC sh
~/thesis_apps/QtSDK/Desktop/Qt/4.8.0/gcc/bin
#+END_SRC

- Compilation error with PythonQt. Wrote to the mailing list.
*** DONE Install Qt 4.7.4
    CLOSED: [2012-03-08 Thu 15:37]
- The binary was not easy to find AT ALL!
- It was actually 4.7.0, but it worked
*** DONE Attempt compilation again
    CLOSED: [2012-03-09 Fri 13:37]

- Installed Qt 4.7.0 in (the working one!)
#+BEGIN_SRC sh
~/thesis_apps/qtsdk-2010.05/qt/bin
#+END_SRC

- Commands to compile:
  1. Create the project Slicer4-Superbuild that manages all the external dependencies of Slicer (VTK, ITK, Python, ...) with:
#+BEGIN_SRC sh
     mkdir Slicer4-SuperBuild
     cd Slicer4-SuperBuild
     ccmake -DQT_QMAKE_EXECUTABLE:FILEPATH=~/thesis_apps/qtsdk-2010.05/qt/bin/qmake ../ # Qt version 4.7.0
     ccmake -DQT_QMAKE_EXECUTABLE:FILEPATH=~/thesis_apps/QtSDK/Desktop/Qt/474/gcc/bin/qmake ../ # Qt version 4.7.4
#+END_SRC
  2. Create the second project in Slicer4-Superbuild/Slicer-build: the "traditional" build directory of Slicer, by running inside Slicer4-Superbuild:
#+BEGIN_SRC sh 
        make -j <Number of cores>
#+END_SRC
  3. Be patient. It takes forever the first time. Forever, seriously.

- Run Slicer:
#+BEGIN_SRC sh 
  Slicer4-SuperBuild/Slicer-build/Slicer
#+END_SRC

- It works! :)

** DONE Write a simple testing module
   CLOSED: [2012-03-20 Tue 16:21]
- The resulting module is here: [[https://github.com/marianabb/slicer_modules/tree/master/ScriptMB][ScriptMB]].

*** Which type of modules should I try?
The best options available for module prototypes are:
- [ ] Command Line Interface: Lots of info [[http://www.slicer.org/slicerWiki/index.php/Slicer3:Execution_Model_Documentation][here]] (for Slicer3, but it's supposed to be very similar).
- [X] Scripted Module: Doesn't need compiling. Have limited access to Slicer internals. Can run CLI from Python, how to do this [[http://www.slicer.org/slicerWiki/index.php/Slicer4:Python][here]].
- [ ] External Module: Loadable module that is compiles outside the slicer build tree. [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Tutorials/ExternalModuleWriting][Tutorial]].
- [ ] Regular Loadable Module: In C++. Compiles with Slicer. [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Tutorials/ModuleWriting][Tutorial]].
*** DONE Write a scripted module (simple, for testing)
    CLOSED: [2012-03-20 Tue 16:10]
- Here are some initial testing [[https://github.com/marianabb/slicer_modules/blob/master/scripted_module.py][scripts]].
- Create a module using the [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/ModuleWizard][ModuleWizard]].
- The file that they open as a volume in the example is a .nrrd, this could be a data file of any type, it just follows some rules.
- The symbol "~" doesn't work on paths.
- The commands for loading a volume work ONLY in the compiled version, not in the binary (I don't know why):
#+BEGIN_SRC python
  slicer.util.loadVolume("/home/mariana/thesis/volumes/first_batch/patient1-us1/test.dcm")
  n = getNode('test')
#+END_SRC
- The effect of the called CLI takes an unlimited amount of time to show up on the UI. I believe it executes fast but the model is not refreshed on screen. See [[force a refresh][here]].
- To access a list of CLIs:
#+BEGIN_SRC python
  parameters = {}
  parameters["ParameterName"] = volumeNode.GetID()
  CLI_module = slicer.modules.CLI_name
#+END_SRC
- To execute a CLI:
#+BEGIN_SRC python
  slicer.cli.run(CLI_module, None, parameters)
#+END_SRC
- Installed the VTK package in the Python tree.

- Slicer can be run as:
#+BEGIN_SRC sh
  ./Slicer --python-script <python script to execute after Slicer loads>
  ./Slicer --python-code <python code to execute after Slicer loads>
#+END_SRC
  Now, what is the difference between "python script" and "python code"?
- Can use matplotlib to plot things. 
- Slicer/Libs/qMRMLWidgets: MRML-aware widgets

- Installed ipython and matplotlib as explained in the tutorial.
**** DONE How to launch term in order to run ipython?
     CLOSED: [2012-03-15 Thu 17:55]
     1. Launch xterm through Slicer:
#+BEGIN_SRC sh
        ./Slicer-build/Slicer --xterm
#+END_SRC
     2. Launch ipython from inside xterm:
#+BEGIN_SRC sh
        ../python-build/bin/ipython
#+END_SRC
***** TODO ipython works, but the command 'import slicer' causes segmentation fault. Fix? 

**** DONE Can a function be added on the console?
     CLOSED: [2012-03-15 Thu 15:52]
Yes, can't use middle-click. Must use right-click+paste or ctrl-c + ctrl-v. This sucks!

**** DONE How to see it from the UI?
     CLOSED: [2012-03-16 Fri 14:47]
Add the path to the module in "Additional module paths" on Slicer settings. It will load it automatically.

**** DONE How to force a refresh on the UI? 
     CLOSED: [2012-03-16 Fri 13:53]
- In the video tutorial there are two commands that produce immediate results in the UI:
#+BEGIN_SRC python
  n = getNode('MRHead1')
  d = n.GetDisplayNode()
  d.SetApplyThreshold(0) # This
  
  i = n.GetImageData()
  import vtk.util.numpy_support
  a = vtk.util.numpy_support.vtk_to_numpy(i.GetPointData().GetScalars())
  a[:] = -a
  i.Modified() # And this!
#+END_SRC

- UPDATE: I think what I was experiencing was not lack of UI response but slowness on the CLIs to finish. I can now tell whether a CLI is still running.

**** DONE Try to call a registration method as a CLI from a script.
     CLOSED: [2012-03-20 Tue 16:08]
- March 16th: almost working. The registration is called but need to handle the result properly.
- March 19th: I'm not sure it's working anymore. Will try to create a simpler CLI call first.  
- March 20th: It works! I've created an example that calls a CLI that subtracts volumes and another that registers two volumes. See my first module: [[https://github.com/marianabb/slicer_modules/tree/master/ScriptMB][ScriptMB]].

- The inputs for all the CLIs are [[http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.0/ModulesMetadata][here]].

**** DONE create a repository
      CLOSED: [2012-03-16 Fri 18:45]
[[https://github.com/marianabb/slicer_modules][Link to the repository]]
     
**** DONE Make a useful UI on the module
     CLOSED: [2012-03-16 Fri 18:36]
- The button "GrayModel" on my new module calls the CLI Gray Scale Model Maker.
- Added button "Register" also. 
- Need more experimenting and examples. Mostly examples. Found a good one in the source code for ChangeTracker: [[https://github.com/fedorov/ChangeTrackerPy][CTsource]]
  
** TODO Write a less basic scripted module
*** DONE Goals
    CLOSED: [2012-04-02 Mon 18:10]
- [X] Have three steps, like in ChangeTracker. Step 1: Volume selection, Step 2: Registration, Step 3: Difference quantification.
- [X] Choose among many registration CLIs.
- [X] Result in a new MRMLScalarVolume that gets created automatically.
- [ ] Need to do more thinking for Step 3.

*** Progress
- [2012-03-20 Tue]: Lots of code reading on ChangeTracker. Started a new module based on it.
- [2012-03-22 Thu]: Progress on the code based on ChangedTracker. Step 1 and 2 are written but not tested. 
  Need more documentation and trials on how to compile and add the module.
- [2012-03-22 Thu]: I am officially stuck trying to compile/activate the module in Slicer since I've added a subdirectory. I've written to the forum. 
  In the mean time I am preparing a set of screenshots on the ACPC Transform module for the meeting with Raili on [2012-03-26 Mon].
- [2012-03-26 Mon]: Got a response from the forum on how to compile. Managed to compile, by adding the variable Slicer\_DIR (/home/mariana/thesis\_apps/Slicer/Slicer4-SuperBuild/Slicer-build) 
  manually, but it doesn't seem to generate the module Wizard which is the main reason for compiling.
- [2012-03-27 Tue]: Did many tests but didn't achieve much. I wrote to the forum again and added my github link so they'll be able to see my code.
  Fixed it! Had to add tha INSTALL\_DIR and DESTINATION\_DIR manually in Wizard/CMakeLists.txt ([[bug on their code][better solution?]]).
- [2012-03-28 Wed]: The module must be configured with:
#+BEGIN_SRC sh
  ccmake -DSlicer_DIR:PATH=/home/mariana/thesis_apps/Slicer/Slicer4-SuperBuild/Slicer-build/ ../
#+END_SRC
  The module currently has only two steps, but it's working.
- [2012-03-29 Thu]: The forum answered, it turns out it was a bug on their code. The have fixed it, now I'm updating (and recompiling, which makes me really sad...).
  Compilation is NOT done (it's 17.45, started it before lunch). Made many changes to add more registration methods but I'm unable to test, good luck tomorrow! haha!
- [2012-03-30 Fri]: The module loading works on the updated Slicer version. Added more registration methods. Fiducial registration still has bugs.
- [2012-04-02 Mon]: Fiducial registration now works. Started quantification step, just a squeleton so far.
- [2012-04-03 Tue]: Added subtraction to quantification step. Improved validation on registration step. Added registered volume and transform result on gui.
- [2012-04-04 Wed] until [2012-04-07 Mon] (easter): Made everything work on my personal computer. Added volume rendering of the differences after subtraction.
- [2012-04-10 Tue]: Added user defined thresholding before rendering of the volume. Needs more tests.
- [2012-04-11 Wed]: Meeting with Raili. Volume rendering with thresholding works. Attempt to fix Raili's volumes, I think I hate Matlab.
- [2012-04-12 Thu]: Discovered and fixed the problem with some of the volumes. We need to include the dicominfo on the .dcm file, otherwise it uses some default
  with wrong planes. Created a script 'convertall.m' to convert all the DICOMDIR files we currently have into .dcm.
- [2012-04-13 Fri]: Robin modified the Matlab script to create .vtk volumes but there's still issues with the dimensions depending on the volume.
  Decision: wait until the meeting with Joel. He might have volumes that we can use directly.
- [2012-04-16 Mon]: [[How do they do quantification][Reading ChangeTracker code]]


*** DONE Add Fiducial registration
    CLOSED: [2012-04-02 Mon 16:09]
Must add a new block of choices that appear if I select this method to choose the two sets of fiducial points.
*** TODO Check all the options in the registration methods and choose wisely
Maybe add extra blocks that allow the user to modify details.

*** TODO Do something about the function setBgFgVolumes legacy from Helper.py
*** DONE The buttons for going back a step don't work.
    CLOSED: [2012-04-03 Tue 17:31]

*** DONE Registration step must validate that there is a registered volume or transform
    CLOSED: [2012-04-03 Tue 14:24]

*** TODO Maybe I want to register baseline to follow-up instead of the other way
Just input them backwards! 
*** TODO Handle only transform, no registered volume
*** TODO Handle non-linear transforms
*** TODO Disable Load test data button while on progress
This is not as simple as it sounds. I don't know if there is a way to modify the UI while calling a simple function.
*** TODO Make the GUI simpler!
*** DONE User selected threshold
    CLOSED: [2012-04-11 Wed 15:02]

** TODO Registration tests
*** TODO Fiducials registration
*** TODO Skull stripping + registration
*** TODO BRAINSFit with a ROI to unselect brain?

** Interesting details about Slicer
- Application settings (including the search path for modules/extensions) are stored in a .ini file. The location of the file depends on the OS:
  + Linux + Mac OS X: ~/.config/www.na-mic.org/Slicer.ini or ~/.config/NA-MIC/Slicer.ini
  + Windows: C:\Users\USERNAME\AppData\Roaming\NA-MIC\Slicer.ini
- Useful [[http://www.slicer.org/slicerWiki/index.php/Documentation/4.0/Developers/Tutorials/Troubleshooting][link]] with advice on handling memory leaks and crashes.

    
* ChangeTracker Module
** DONE How slow/good is the slow option? (deformation map)
    CLOSED: [2012-02-22 Wed 16:21]
- It's not an option in Slicer4, only in Slicer3. I don't know why it's mentioned in the tutorial, probably the Slicer4 version is not done.
- More quantification metrics can be added manually.
      
** DONE Check ChangeTracker source code
   CLOSED: [2012-03-27 Tue 15:02]
See [[Write a less basic scripted module]]
** DONE Does it exist for Slicer3?
    CLOSED: [2012-02-23 Thu 13:59]
    Yes, actually the documentation is better and the module is more complete.

** DONE Find a way to use the slow option (deformation map)
    CLOSED: [2012-02-23 Thu 14:13]
    Solution: Use Slicer3

** DONE Read the paper about metrics to quantify tumor progression
    CLOSED: [2012-02-27 Mon 15:41]
[[http://www.spl.harvard.edu/publications/item/view/1430][- Link to the paper]]
- [[file:../thesis_papers/monitoring_slowly_evolving_tumors.org][Summary]]

** DONE Can I use it freely?
   CLOSED: [2012-03-02 Fri 14:26]
- The module is included in Slicer3, so I'm assuming it has the same Licence as Slicer.
- Here is a [[http://slicer.org/pages/LicenseText][Link]] to the Slicer License Agreement.
- Basically it says that the software is open source and grants everything to 'Brigham' (The Brigham and Women's Hospital, Inc.).

** DONE How do they do quantification?
   CLOSED: [2012-05-29 Tue 14:25]
The process is divided into 5 steps:
1. SelectScans:
#+BEGIN_SRC python
   pNode = self.parameterNode()
   pNode.SetParameter('baselineVolumeID', baselineID)
   pNode.SetParameter('followupVolumeID', followupID)
#+END_SRC

2. DefineROI:
   Defines the ROI and the segmentation of the Baseline volume according to the ROI.
#+BEGIN_SRC python
   roi = slicer.mrmlScene.CreateNodeByClass('vtkMRMLAnnotationROINode')
   slicer.mrmlScene.AddNode(roi)
   parameterNode.SetParameter('roiNodeID', roi.GetID())


   outputVolume = slicer.mrmlScene.GetNodeByID(cropVolumeNode.GetOutputVolumeNodeID())
   outputVolume.SetName("baselineROI")
   pNode.SetParameter('croppedBaselineVolumeID',cropVolumeNode.GetOutputVolumeNodeID())

   vl = slicer.modules.volumes.logic()
   roiSegmentation = vl.CreateLabelVolume(slicer.mrmlScene, outputVolume, 'baselineROI_segmentation')
   pNode.SetParameter('croppedBaselineVolumeSegmentationID', roiSegmentation.GetID())
#+END_SRC

3. SegmentROI:
   User defined threshold. Uses an opacity map to show the areas included in the threshold.
#+BEGIN_SRC python
   pNode = self.parameterNode()
   pNode.SetParameter('thresholdRange', str(self.__threshRange.minimumValue)+','+str(self.__threshRange.maximumValue))
#+END_SRC

4. AnalyzeROI
   - Creates a list of metrics that are other modules from Slicer specific from ChangeTracker. In Slicer 4 only one is available: FAST.
   - Registers followup to baseline and saves it in 'FollowupTransform'. Registration method used is BRAINSFit with only Rigid and Affine transforms.
   - Resample followup to baselineROI with the module ResampleScalarVectorDwiVolume. Save result in 'followupVolumeROI'.
   - Run each metric as a CLI on the cropped volumes.
     
#+BEGIN_SRC python
   pNode.SetParameter('followupTransformID', followupTransform.GetID()) # The result of rigid registration baselineVolume/followupVolume

   pNode.SetParameter('croppedFollowupVolumeID', followupVolumeROI.GetID())

   pNode.SetParameter('resultVolumes', resultVolumesList)

   pNode.SetParameter('metrics', metricsList)
#+END_SRC
   
   - The CLI is located in the same code /Metrics/IntensityDifference. It's written in c++.


5. ReportROI:
   Shows the results for all the metrics (only one for Slicer 4).


* ITK
Open source registration and segmentation toolkit.
- [2012-04-19 Thu] Reading some of the [[http://www.itk.org/ItkSoftwareGuide.pdf][manual]].
- ITK modules:
  1. Insight:: Source code, examples and aplications.
  2. InsightDocuments:: Documents, tutorials, materials for design and marketing.
  3. InsightApplications:: Complex applications using ITK and other systmes such as VTK, Qt and FLTK. Should only be compilead after the Insight module.
- Uses 'generic programming':: types will be specified later and then instantiated when needed for specific types provided as parameters. Uses Standard Template
  Library in C++ (STL) that allow functions and classes to operate with generic types (different data trypes without being rewritten for each one).
- Rather than using the standard C++ class constructor and destructor, instances of an ITK class are created with the static class New() method.
- Implements memory management through reference counting. All instances of an ITK object have a 'Register()' method invoked on them by any other object that 
  references them. To decrement the reference count there is also a 'Delete()' method. BUT the helper class 'itk::SmartPointer' takes care of this!.
#+BEGIN_SRC c++
  MyRegistrationFunction(){

  // here an interpolator is created and associated to the SmartPointer "interp".
  InterpolatorType::Pointer interp = InterpolatorType::New();

  } // End of scope, interp is destroyed and the actual interpolator object reference count is decremented.
#+END_SRC 
- Event handling is implemented using thr Subject/Observer design pattern.
- Main types of data:
  1. Image:: n-dimensional, regular sampling of data.
  2. Mesh:: n-dimensional, unstructured grid. Topology defined by a set if cells with a type and connectivity list.
- It supports Python and Tcl through CABLE wrapping tool.

** DONE Compile ITK
    CLOSED: [2012-04-20 Fri 10:06]
- Download the source code, [[http://www.itk.org/Wiki/ITK/Git/Develop][instructions]].
- Configure and compile:
#+BEGIN_SRC bash
  mkdir ITK-build && cd ITK-build
  cmake ../
  make -j<number of cores>
#+END_SRC

** DONE Write a simple ITK program that can be called from Slicer
   CLOSED: [2012-04-26 Thu 16:17]
- My testing ITK program subtracts two volumes.
  - [2012-04-24 Tue] A pretty good skeleton. Doesn't work completely yet.
  - [2012-04-26 Thu] The program works. There is a problem with the output volume since it creates a Label Map by default. 
    But it's easily fixable directly in Slicer, and I think the goal of this test is complete.
    I added the program to the git repository [[https://github.com/marianabb/slicer_modules/tree/master/MRIChangeDetector/Quantifiers/ITKTest][here]].

** TODO Experiment with displacement fields in ITK
+ [2012-04-26 Thu] 
  - Created a new ITK program (CLI) for Slicer: ITKTensor.
*** DONE Read useful sections in the ITK manual
    CLOSED: [2012-05-08 Tue 11:43]
    1. Resampling Using a Deformation Field (242)
       - In the example code a DisplacementFieldType is created as:
#+BEGIN_SRC c++
         typedef   float                                         VectorComponentType;
         typedef   itk::Vector< VectorComponentType, Dimension > VectorPixelType;
         typedef   itk::Image< VectorPixelType,  Dimension >     DisplacementFieldType;
#+END_SRC
         So a Displacement Field is an ITK Image where the elements are Vectors. Make sense.
       - The filter used to apply the field on the original image is a WarpImageFilter:
#+BEGIN_SRC c++
          typedef itk::WarpImageFilter< ImageType, ImageType, DisplacementFieldType  >  FilterType;
#+END_SRC

    1. Deformable Registration (438)
       - Not very useful unless I'm planning to write my own registration algorithm. Since I'm not, I'll just use the methods provided in Slicer.
    2. Demons Deformable Registration (461)
       - Same as with deformable registration.
       - Has useful pointers on how to handle DeformationField types.
    3. Visualizing Deformation Fields (469)
       - Uses ParaView to visualize 2D and 3D Deformation Fields. To visualize the field in Paraview:
         1. Load the Deformation field (a .mha file in my case).
         2. Click on apply.
         3. Use the "Glyph" filter with Arrows to show the field.
         4. Click on apply.
+ [2012-05-08 Tue]
  - Considerations for the CLI ITKTensor:
    1. Inputs: FixedVolume, MovingVolume, DeformationField resulting from registration.
    2. Ouputs: Differences as volumes measured in mm^3.
    3. How to get there?
       - I can use initially the ChangeTracker metric called "DemonsRegistrationJacobianMetric". Code [[https://github.com/fedorov/ChangeTrackerPy/blob/master/Metrics/DemonsJacobian/ChangeTrackerDemonsRegistrationJacobianMetric.cxx][here]].
         - It uses the deformation field from DemonsRegistration to calculate Jacobian and volume differences from there.
         - It seems PERFECT! But it must be buggy, otherwise the metric would be included in Slicer4.
         - It uses the class itk::WarpJacobianDeterminantFilter which is not included in ITK. It's part of the [[http://www-sop.inria.fr/asclepios/software/vtkINRIA3D/][vtkINRIA3D]] project.
+ [2012-05-11 Fri]
  - Reading about Iterators to go through images and volumes as fast as possible:
    - Most iterators increment and decrement in the direction of the fastest increasing image dimension, wrapping to the first position in
      the next higher dimension at region boundaries. An iterator first moves accross columns, then down rows, the from slice to slice, and so on.
    - A conditional interator visits pixels only if they have certain values or connectivities. But there is no mention of a specific
      class that implements this. I guess and "if" could suffice.
    - For efficiency, most ITK image iterators do not perform bounds checking. It is possible to move an iterator aoutside its valid region.
    - itk::ImageRegionIterator only calculates an index when is asked for, while itk::ImageRegionIteratorWithIndex maintains its index location
      as a member variable that is updated if the interator moves. Teration speed is penalized, but the queries are more efficient.
    - itk::NeighborhoodIterator could be useful to follow de path of some change. Although we might already have that from the deformation field.
+ [2012-05-14 Mon]
  - I now have a module that works and outputs a LabelMap with colors indicating where the volume has shrunk or grown.
  - The code comes mostly from ChangeTracker. Seems to work.
  - The code for the module is [[https://github.com/marianabb/slicer_modules/tree/master/MRIChangeDetector/Quantifiers/ITKTensor][here]].
           
*** TODO Produce an image as output where the color/grayscale value is related to the Jacobian
+ [2012-05-15 Tue]
  - Tried just creating an image from the duplicate. There is a small problem with the types: I want the grayscale image to have float values, but the
    base volume has int values. A solution is to use floats always, but this makes a big difference in the LabelMap.
  - Tried using the ITK example to create an image based on vector magnitudes. But the filter I'm supposed to use is not included in the Slicer version.
    (At least this is what I think). The example I tries is [[http://www.itk.org/Wiki/ITK/Examples/VectorImages/VectorMagnitudeImageFilter][here]].
  - Next idea: Find the maximum of the jacobian values and scale from 0 to 255. (measure * 255)/maxJac.

+ [2012-05-21 Mon]
  - Find maxJacobian with [[http://www.itk.org/Wiki/ITK/Examples/ImageProcessing/MinimumMaximumImageCalculator][this]] example. Created an image scaling from 0 to 255. No visible difference from before... Robin suggested logarithmic filter.
  - Changed to a better way of scaling (using a filter). Example [[http://www.itk.org/Wiki/ITK/Examples/ImageProcessing/RescaleIntensityImageFilter][here]].
  - Tried to maintain the LabelMap with char and the OutVolume with float with casting, as shown [[http://www.itk.org/Wiki/ITK/Examples/ImageProcessing/CastImageFilter][here]]. Not very sucessfully.

+ [2012-05-24 Thu]
  - Read part of the chapter about Morphometry.
  - Managed to fix the types problem by creating a new volume with float types from scratch and filling it with the Jacobians during the iteration.
  - Attempt: Use itk::LogImageFilter to calculate the logarithm of the Jacobians before scaling the grey values between 0 and 255.
    Result: Everything is 'nan' in the resulting volume. 
    - Maybe because there are quite a few Jacobians that are less than zero. Using the absolute values didn't work.

+ [2012-05-29 Tue]
  - Meeting with Robin generated a TODO list:
**** TODO Try obtaining a Grid transform and using it as a deformation field from BSpline deformable 
**** TODO Try logarithm again but adding +1
**** TODO Try the algorithm with other volumes. Begin with Meningioma1 and Meningioma2.
**** TODO Do some experimenting to see which values of the Jacobian are more important and which can be ignored.


* TODO Focus on Tensor-based Morphometry
- Taking ChangeTracker as base we know that:
  1. It uses BRAINSDemonWarp (DemonsRegistrationJacobianMetric).
     - The output is a GridTransform which is supposed to be a Displacement Field (exactly what we want).
     - The implementation of GridTransforms UI in Slicer is not complete. The backend should work according to [[http://slicer-devel.65872.n3.nabble.com/Grid-transforms-in-Slicer-4-td2426968.html][this]] forum thread.
  2. It uses the Jacobian to calculate the amount of change and the volume of the changes.
  3. It is currently not working in Slicer4. So we can't just use the code.

** TODO Learn everything about the Jacobian
- To apply a Jacobian filter on ITK:
  1. itk::DeformationFieldJacobianDeterminantFilter :: Computes a scalar image from a vector image (e.g., deformation field) input, 
       where each output scalar at each pixel is the Jacobian determinant of the "vector field" at that location.  
       Computes the proper Jacobian Determinant for a vector field described this way as det[ dT/dx ] = det[ du/dx ].
       In most cases deformation field mappings are represented as displacements from the current location so that an identity 
       mapping is represented by an all zero vector field. In that more common case, one should use the DisplacementFieldJacobianDeterminantFilter.
  2. itk::DisplacementFieldJacobianDeterminantFilter :: This calculation is correct in the case where the vector image is a "displacement" from 
       the current location. The computation for the jacobian determinant is: det[ dT/dx ] = det[ I + du/dx ].
  3. itk::WarpJacobianDeterminantFilter :: Not included in ITK. Part of the [[http://www-sop.inria.fr/asclepios/software/vtkINRIA3D/][vtkINRIA3D]] project. Computes a scalar image from a vector 
     image (e.g., deformation field) input, where each output scalar at each pixel is the Jacobian determinant of the "warping" at that location.
     Note that the determinant of a zero "vector field" is also zero, whereas the Jacobian determinant of the corresponding identity "warp transformation" is 1.0.
  
- Conclusions on this:       
  - I am not entirely sure about the differences between 2. and 3. But from what I see in the documentation, they appear to be closely related. The problem
    with the "vector fields" is that the determinant of a zero vector field is also zero, while the determinant of a zero "warp transform" is 1.0. But
    2. appears to handle this by adding ones to the diagonal elements of the Jacobian prior to taking the derivative.
  - I decided to use 2. for the module, since it's already included in ITK.

** TODO Read the book chapter about this found by Robin
- Read some between [2012-05-23 Wed] and [2012-05-24 Thu]. Must continue reading and do a summary soon.
   

* Other tools
** TODO Do some experiments with FSL (The tool mentioned by Raili)
Here is the [[http://www.fmrib.ox.ac.uk/fslcourse/][Link]]

** DONE Platinum-image. Developed at Uppsala Hospital
   CLOSED: [2012-04-18 Wed 11:41]
- Web: http://code.google.com/p/platinum-image/
- Based on ITK, VTK, FLTK.
- Created from scratch for specific project needs. Modules can be added depending on the project.
- Seems to be a lot simpler than Slicer.
- Registration of volumes is also slow.

** TODO FreeSurfer

** TODO Elastix
- Web: http://elastix.isi.uu.nl/
- Open Source based on ITK.
- Only command line.
- Made to compare registration methods.

** TODO ParaViewWeb
- Web: http://www.paraview.org/Wiki/ParaViewWeb


* Extras
** DONE New repository for papers
   CLOSED: [2012-02-22 Wed 11:22]
   It's in Github, named thesis\_papers
** DONE New repository for the time tracker
   CLOSED: [2012-03-01 Thu 11:28]
   It's in Github, named time\_tracker
** DONE Can I use my public\_html page?
   CLOSED: [2012-03-01 Thu 19:02]
Yes, yes I can. [[http://cb.uu.se/~mariana][Here]].
** DONE Fix all the links, specially the papers.
   CLOSED: [2012-03-05 Mon 13:55]
** There is always more to learn about org mode!






Chalmers: andrew mehnert
